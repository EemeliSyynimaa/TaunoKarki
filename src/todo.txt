 - Replace glew
  - Fetch GL functions from the system by hand
 - Replace GLM
  - Make own implementation of all used math functions
  - Use SSE
 - Replace Box2D
  - Implement own collision engine
  - Divide objects into groups: enemies, player, bullets, walls etc.
  - Use circular bounding box for moving objects
  - Implement a simple raycast for AI
 - Replace lodepng
  - Use bitmaps instead?
  - Or own custom format?
 - Replace SDL
  - Platform layers for win32 and linux
 - Move game code into own library
  - Load game code dynamically (hot reload)
 - Use custom memory allocation
  - Platform code allocates large chunk of memory and passes it to the game library

Improve build tools
 - Use clang formatting
 - Make project buildable and runnable from sublime
 - Proper difftool (meld is not working good enough)
 - Git from sublime?
 - Move up/down to the next empty line

When all third party code is replaced, it's time to move on:

- Write all remaining code in C
 - Re-design entity system
  - No overengineering
- Software renderer
 - 3D walls
 - Sprites
 - Particle system
 - Lights
 - Animations
  - Skeleton?
- Gameplay improvements
 - Game feel and balance
  - Screen shake?
 - More weapons, enemies
 - Improved AI
 - Improved map generation
 - In-game map editor?
- Multiplayer?
 - Local?
 - Network?
- Sound system
 - Write an own mixer?
- Move rendering code into own library
 - In future, can switch between software or hardware rendering
 - Vulkan? 